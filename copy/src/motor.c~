
#include <stdio.h>
#include <bcm2835.h>
#include <time.h>
#include <unistd.h>
#include <pthread.h>
#include <stdlib.h>
#include <sys/types.h>
#include "interface.h"

#define FORWARD 1
#define RIGHT 2
#define LEFT 3
#define MOTORA RPI_GPIO_P1_12
#define MOTORB RPI_GPIO_P1_11



struct motor_params{
  int pin;
  float duty;
  };

struct motor_params motorleft,motorright;

pathNode *headList;
extern param* res_params;
extern int endofList;

void printPath ()
{
pathNode * iter;
iter = headList;
while (iter)
{
	//printf("%p\t",iter);
	printf("%d \n", iter -> id) ;
	iter = iter -> next;
}
//printf("%p\t",iter);
}

void run ()
{   init();
    endofList = 0;
    // memory allocation for recieved parameters from graph to drive the bot
    res_params = (param*) malloc(sizeof(param)); 
    int i = 0;
    while(i<6){
    
        createVertexNode();
        
        i++;
    }
    addEdge(searchNode(0),searchNode(1), 3, Straight, Straight );
    addEdge(searchNode(0),searchNode(2), 3, Right, Right );
    addEdge(searchNode(1),searchNode(2), 4, Straight, Straight );
    addEdge(searchNode(2),searchNode(4), 3, Right, Right );
    addEdge(searchNode(2),searchNode(5), 3, Right, Right );
    addEdge(searchNode(2),searchNode(3), 6, Right, Right );
    addEdge(searchNode(1),searchNode(3), 3, Right, Right );
    addEdge(searchNode(3),searchNode(6), 3, Right, Right );
    
    
    headList = insert(headList,0);
    insert(headList,1);
    insert(headList,2);
    insert(headList,3);
    insert(headList,6);
    insert(headList,3);
    //printPath();
    //print();
  }

void init_motors(){
   motorleft.pin = MOTORA;
   motorright.pin = MOTORB;
   if(!bcm2835_init())
    return ;

  bcm2835_gpio_fsel(MOTORA, BCM2835_GPIO_FSEL_OUTP);
  bcm2835_gpio_fsel(MOTORB, BCM2835_GPIO_FSEL_OUTP);
}

void *drivemotors(void *arg){

 struct  motor_params* motor = (struct motor_params*)arg;

 
 while(1){
   bcm2835_gpio_write(motor->pin,HIGH);
   bcm2835_delayMicroseconds(motor->duty*200);
   bcm2835_gpio_write(motor->pin,LOW);
   bcm2835_delayMicroseconds((100-motor->duty)*200);
 
  } 
}

void driveStraight(){
  printf("Going Straight\n");
  pthread_t lth ,rth;
  motorright.duty = 3.75;
  motorleft.duty = 11.25;
  
  //starting motor thread   
  pthread_create(&rth,NULL,drivemotors,(void*)&motorright);
  pthread_create(&lth,NULL,drivemotors,(void*)&motorleft);
  
  sleep(res_params ->timer);
  
  pthread_cancel(rth);
  pthread_cancel(lth);
  pthread_join(rth,NULL);
  pthread_join(lth,NULL);
  
}

void turnRight(){
  printf("Turning Right\n");
  pthread_t lth ,rth;
  motorright.duty = 7.25;
  motorleft.duty = 11.25;
  
  pthread_create(&rth,NULL,drivemotors,(void*)&motorright);
  pthread_create(&lth,NULL,drivemotors,(void*)&motorleft);
  
  usleep(1350000);
  
  pthread_cancel(rth);
  pthread_cancel(lth);
  pthread_join(rth,NULL);
  pthread_join(lth,NULL);
  
  //driveStraight();
  
}

void turnLeft(){
  printf("Turning Left\n");
  pthread_t lth ,rth;
  motorright.duty = 3.75;
  motorleft.duty = 7.25;
  
  pthread_create(&rth,NULL,drivemotors,(void*)&motorright);
  pthread_create(&lth,NULL,drivemotors,(void*)&motorleft);
  
  usleep(1350000);
  
  pthread_cancel(rth);
  pthread_cancel(lth);
  pthread_join(rth,NULL);
  pthread_join(lth,NULL);
  
  driveStraight();
}

void rotate360(){
   pthread_t lth ,rth;
  motorright.duty = 7.25;
  motorleft.duty = 11.25;
  
  pthread_create(&rth,NULL,drivemotors,(void*)&motorright);
  pthread_create(&lth,NULL,drivemotors,(void*)&motorleft);
  
  usleep(1350000*4);
  
  pthread_cancel(rth);
  pthread_cancel(lth);
  pthread_join(rth,NULL);
  pthread_join(lth,NULL);
   
}
int main(int argc,char **argv){ 
    init_motors();
    param*  moveParams;
  
  //pthread_t lth ,rth;
  run();

 
  orientation direction;
  
 
  
  while(headList && (endofList == 0)){
	//printf("Reached \n");
       getParam(headList);
       //res_params -> turn = 0;
       direction =  res_params->turn;
       rotate360();
      switch(direction){
      	case Straight:
      	  driveStraight();
      	  /*motorright.duty = 3.75;
      	  motorleft.duty = 11.25;*/
      	break;
      	case Right:
      	  turnRight();
      	  /*motorright.duty = 0;
      	  motorleft.duty = 11.25;*/
      	break;
      	case Left:
      	  turnLeft();
      	  /*motorright.duty = 3.75;
      	  motorleft.duty = 0;*/
      	break;
      	default:
      	  motorright.duty = 7.25;
      	  motorleft.duty = 7.25;
      	  break; 
      }
      
      /*
      //starting motor thread   
      pthread_create(&rth,NULL,drivemotors,(void*)&motorright);
      pthread_create(&lth,NULL,drivemotors,(void*)&motorleft);
      //sleep(3);
      sleep(res_params ->timer);
      /*if(direction == FORWARD)
    	sleep(3);
      else{ 
	sleep(1);
	} */	 
      /*pthread_cancel(rth);
      pthread_cancel(lth);
      pthread_join(rth,NULL);
      pthread_join(lth,NULL);*/
      headList = headList->next;
      
    
  }
  
  bcm2835_close();

  return 0;
}
